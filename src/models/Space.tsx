/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: silvercrow101 (https://sketchfab.com/silvercrow101)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/space-boi-f6a8c6a6727b4f2cb020c8b50bb2ee60
Title: space boi
*/

import * as THREE from 'three';
import React, { useRef, useEffect, useCallback } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { GLTF } from 'three-stdlib';
import { a } from '@react-spring/three';

import spaceScene from '../assets/3d/space.glb';
import { RotationDirection } from '../routes/Home';

interface SpaceProps {
  isRotating: boolean;
  rotationDirection: RotationDirection
  setCurrentStage: React.Dispatch<React.SetStateAction<number>>;
  setHoveringObject: React.Dispatch<React.SetStateAction<string>>;
  setIsRotating: React.Dispatch<React.SetStateAction<boolean>>;
  setRotationDirection: React.Dispatch<React.SetStateAction<RotationDirection>>;
}

type GLTFResult = GLTF & {
  nodes: {
    body_Material001_0: THREE.Mesh;
    body_Material002_0: THREE.Mesh;
    waves_Material002_0: THREE.Mesh;
    waves1_Material002_0: THREE.Mesh;
    waves2_Material002_0: THREE.Mesh;
    particles_Material002_0: THREE.Mesh;
    Sphere_Material001_0: THREE.Mesh;
    Sphere001_Material002_0: THREE.Mesh;
    Sphere004_Material002_0: THREE.Mesh;
    Sphere005_Material001_0: THREE.Mesh;
    Sphere006_Material002_0: THREE.Mesh;
    Sphere009_Material002_0: THREE.Mesh;
    Sphere010_Material002_0: THREE.Mesh;
    Sphere011_Material002_0: THREE.Mesh;
    Cube_Material001_0: THREE.Mesh;
    Sphere002_Material001_0: THREE.Mesh;
    Sphere002_Material002_0: THREE.Mesh;
    Sphere003_Material002_0: THREE.Mesh;
    Sphere007_Material001_0: THREE.Mesh;
    Sphere007_Material002_0: THREE.Mesh;
    Sphere008_Material002_0: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshBasicMaterial;
    ["Material.002"]: THREE.MeshBasicMaterial;
  };
};

const Space = ({ isRotating, setCurrentStage, setHoveringObject, setIsRotating, setRotationDirection }: SpaceProps ) => {
  const planetOneRef = useRef<THREE.Group>(null!);
  const planetTwoRef = useRef<THREE.Group>(null!);
  const planetThreeRef = useRef<THREE.Group>(null!);
  const planetFourRef = useRef<THREE.Group>(null!);
  const spaceRef = useRef<THREE.Group>(null!);
  const { camera } = useThree();

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(spaceScene) as GLTFResult;

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const adjustForScreenSize = () => {
    const screenPosition = [0, -6.5, -43];
    const cameraRotation = [0.1, 4.7, 0];
    let screenScale = null;
    if (window.innerWidth < 768) {
      screenScale = [0.9, 0.9, 0.9];
    } else {
      screenScale = [1, 1, 1];
    }
    return [screenScale, screenPosition, cameraRotation];
  }

  const [scale, position] = adjustForScreenSize();

  const handlePointerDown = useCallback((e: PointerEvent | TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
    const clientX = (e as TouchEvent).touches ? (e as TouchEvent).touches[0].clientX : (e as PointerEvent).clientX;
    lastX.current = clientX;
  }, [setIsRotating]);

  const handlePointerUp = useCallback((e: PointerEvent | TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }, [setIsRotating]);

  const handlePointerMove = useCallback((e: PointerEvent | TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();
    const clientX = (e as TouchEvent).touches ? (e as TouchEvent).touches[0].clientX : (e as PointerEvent).clientX;
    const clientY = (e as TouchEvent).touches ? (e as TouchEvent).touches[0].clientY : (e as PointerEvent).clientY;

    // animate running
    if (isRotating) {
      const delta = (clientX - lastX.current) / viewport.width;
      spaceRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
      if (delta != 0) setRotationDirection(delta < 0 ? 'left' : 'right');
    }
    
    // detect planet hover
    const mouse = new THREE.Vector2();
    const raycaster = new THREE.Raycaster();
    mouse.x = (clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(clientY / window.innerHeight) * 2 + 1;
    raycaster.setFromCamera(mouse, camera);
    if (raycaster.intersectObjects(planetOneRef.current.children, true).length > 0) setHoveringObject('planetOne');
    else if (raycaster.intersectObjects(planetTwoRef.current.children, true).length > 0) setHoveringObject('planetTwo');
    else if (raycaster.intersectObjects(planetThreeRef.current.children, true).length > 0) setHoveringObject('planetThree');
    else if (raycaster.intersectObjects(planetFourRef.current.children, true).length > 0) setHoveringObject('planetFour');
    else setHoveringObject('');
  }, [camera, isRotating, viewport.width, setHoveringObject, setRotationDirection]);

  const handleKeyDown = useCallback((e: KeyboardEvent) => {
    if (e.key === 'ArrowLeft') {
      if (!isRotating) setIsRotating(true);
      spaceRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === 'ArrowRight') {
      if (!isRotating) setIsRotating(true);
      spaceRef.current.rotation.y -= 0.01 * Math.PI;
    }
  }, [isRotating, setIsRotating]);

  const handleKeyUp = useCallback((e: KeyboardEvent) => {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
      setIsRotating(false);
    }
  }, [setIsRotating]);

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;
      if (Math.abs(rotationSpeed.current) < 0.001) rotationSpeed.current = 0;
      spaceRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = spaceRef.current.rotation.y;
      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
      // set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(0);
      }
    }
  })

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    }
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove, handleKeyDown, handleKeyUp]);

  return (
    <a.group
      ref={spaceRef} 
      position={new THREE.Vector3(...position)}
      scale={new THREE.Vector3(...scale)}
    >
      <group scale={0.05}>
        {/* SPACE MAN */}
        <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <mesh
            geometry={nodes.body_Material001_0.geometry}
            material={materials["Material.001"]}
          />
          <mesh
            geometry={nodes.body_Material002_0.geometry}
            material={materials["Material.002"]}
          />
        </group>
        {/* SMALL BLACK PLANET - 1 */}
        <group
          ref={planetOneRef}
          position={[-357.404, 392.646, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={39.706}
        >
          <mesh
            geometry={nodes.Sphere002_Material001_0.geometry}
            material={materials["Material.001"]}
          />
          <mesh
            geometry={nodes.Sphere002_Material002_0.geometry}
            material={materials["Material.002"]}
          />
        </group>
        {/* SMALL BLACK PLANET - 2 */}
        <group
          ref={planetTwoRef}
          position={[199.634, 566.883, -221.001]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={39.706}
        >
          <mesh
            geometry={nodes.Sphere007_Material001_0.geometry}
            material={materials["Material.001"]}
          />
          <mesh
            geometry={nodes.Sphere007_Material002_0.geometry}
            material={materials["Material.002"]}
          />
        </group>
        {/* LARGE WHITE PLANET - 1 */}
        <group ref={planetThreeRef}>
          <mesh
            geometry={nodes.Sphere_Material001_0.geometry}
            material={materials["Material.001"]}
            position={[375.469, 427.948, 0]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={62.402}
          />
          <mesh
            geometry={nodes.Sphere001_Material002_0.geometry}
            material={materials["Material.002"]}
            position={[375.469, 427.948, 0]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={60.324}
          />
          <mesh
            geometry={nodes.Sphere004_Material002_0.geometry}
            material={materials["Material.002"]}
            position={[375.469, 427.948, 0]}
            rotation={[-0.688, 0, 0]}
            scale={[104.129, 81.609, 0]}
          />
        </group>
        {/* LARGE WHITE PLANET - 2 */}
        <group ref={planetFourRef}>
          <mesh
            geometry={nodes.Sphere006_Material002_0.geometry}
            material={materials["Material.002"]}
            position={[-341.988, 460.196, -117.028]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={60.324}
          />
          <mesh
            geometry={nodes.Sphere005_Material001_0.geometry}
            material={materials["Material.001"]}
            position={[-341.988, 460.196, -117.028]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={62.402}
          />
        </group>
        {/* SMALL PLANETS */}
        <group>
          <mesh
            geometry={nodes.Sphere011_Material002_0.geometry}
            material={materials["Material.002"]}
            position={[-553.462, 331.074, -379.067]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={11.437}
          />
          <mesh
            geometry={nodes.Sphere010_Material002_0.geometry}
            material={materials["Material.002"]}
            position={[-287.442, 585.792, -311.857]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={16.881}
          />
          <mesh
            geometry={nodes.Sphere009_Material002_0.geometry}
            material={materials["Material.002"]}
            position={[507.522, 667.594, -214.475]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={16.881}
          />
        </group>
        {/* SKY */}
        <group>
          <mesh
            geometry={nodes.particles_Material002_0.geometry}
            material={materials["Material.002"]}
            position={[489.69, 793.811, 355.293]}
            rotation={[-Math.PI / 2, 0, -Math.PI / 2]}
            scale={20.408}
          />
          <mesh
            geometry={nodes.Cube_Material001_0.geometry}
            material={materials["Material.001"]}
            position={[0, -101.673, 0]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={[1120.013, 1120.013, 1120.013]}
          />
        </group>
        {/* FLOOR */}
        <mesh
          geometry={nodes.waves_Material002_0.geometry}
          material={materials["Material.002"]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[100, 100, 1.891]}
        />
        <mesh
          geometry={nodes.Sphere003_Material002_0.geometry}
          material={materials["Material.002"]}
          position={[-357.404, 392.646, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={41.075}
        />
        <mesh
          geometry={nodes.Sphere008_Material002_0.geometry}
          material={materials["Material.002"]}
          position={[199.634, 566.883, -221.001]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={41.075}
        />
      </group>
    </a.group>
  );
}

export default Space;
